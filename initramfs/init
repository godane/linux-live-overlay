#!/bin/sh
# Initial script for Linux Live Kit
# Author: Tomas M <http://www.linux-live.org/>

export PATH=.:/:/usr/sbin:/usr/bin:/sbin:/bin

. /lib/.config
. /lib/livekitlib

transfer_initramfs

MEMORY=/memory
CHANGES=$MEMORY/changes
UNION=$MEMORY/union
DATAMNT=$MEMORY/data
BUNDLES=$MEMORY/bundles
WORK=$MEMORY/work
SYSTEM=$MEMORY/system

header "Live Kit init <http://www.linux-live.org/>"

init_proc_sysfs

debug_start
                                                                                                                                                       debug_shell
init_devs
init_overlay
init_zram
modprobe_everything

# find data dir with filesystem bundles
DATA="$(find_data 60 "$DATAMNT")"
                                                                                                                                                      debug_shell
# setup persistent changes, if possible
persistent_changes "$DATA" "$CHANGES"
                                                                                                                                                      debug_shell
# copy to RAM if needed
DATA="$(copy_to_ram "$DATA" "$CHANGES")"
                                                                                                                                                      debug_shell
# init aufs union
init_union "$CHANGES" "$UNION"
                                                                                                                                                      debug_shell
# add data to union
mkdir $WORK
mkdir $SYSTEM
union_append_bundles "$DATA" "$BUNDLES" "$UNION"

MODPATH="$(cmdline_value modpath)"
if [ "$MODPATH" != "" ]; then
union_append_bundles_modpath "$DATAMNT" "$BUNDLES" "$MODPATH" "$UNION"
fi

for i in $(find $BUNDLES -type d -maxdepth 1 | sort); do
	modulesbranches="$i=ro:$modulesbranches"
done
modulesbranches=$(echo $modulesbranches | sed 's/:$//')
unionfsmodulesbranches=$(echo $unionfsmodulesbranches | sed "s|:${BUNDLES}||g") #TODO: Unionfs-
overlaymodulesbranches=$(echo $modulesbranches | sed "s|=ro||g" | sed "s|:${BUNDLES}$||g")

if [ -z "$aufs" ]; then
echo "$overlaymodulesbranches" > /modulesbranches.txt
	if [ "$NOCHANGE" == "" ]; then
		WORK=$DATA/work
		CHANGES=$DATA/changes
	fi
	mount -t overlay -o workdir=$WORK,upperdir=$CHANGES,lowerdir=$overlaymodulesbranches overlay $UNION
fi
																																				  debug_shell
#if [ ! -z "$hostname" ]; then
#	if [ ! -z "$domain" ]; then
#		echo "127.0.0.1 localhost" > $UNION/etc/hosts
#		echo "127.0.0.1 $hostname.$domain $hostname" >> $UNION/etc/hosts
#		echo "$hostname.$domain" > $UNION/etc/HOSTNAME
#	fi
#fi

if [ ! -z "$hostname" ]; then
# Configure hostname and network:
echo "${hostname}.example.net" > ${UNION}/etc/HOSTNAME
if [ -f ${UNION}/etc/NetworkManager/NetworkManager.conf ]; then
  sed -i ${UNION}/etc/NetworkManager/NetworkManager.conf -e "s/^hostname=.*/hostname=${hostname}/"
fi
#sed -e "s/^\(127.0.0.1\t*\)darkstar.*/\1${hostname}.example.net ${hostname}/" -i ${UNION}/etc/hosts
echo "127.0.0.1 localhost" > ${UNION}/etc/hosts
echo "127.0.0.1 ${hostname}.example.net ${hostname}" >> ${UNION}/etc/hosts
fi

#setup user and password
if [ ! -z "$user" ]; then
	if [ ! -d $UNION/home/$user ]; then
		[ -d $UNION/home ] || mkdir -p $UNION/home
		echo "Setting up $user"
		#chroot $UNION /usr/sbin/useradd -m -g users -s /bin/bash $user
		#chroot $UNION /usr/sbin/usermod -G wheel,audio,cdrom,floppy,plugdev,video,power,netdev,lp,scanner,kmem $user
		chroot $UNION useradd -m -g users -s /bin/bash $user
		chroot $UNION usermod -G wheel,audio,cdrom,floppy,plugdev,video,power,netdev,lp,scanner,kmem $user

		echo "Setting up $user password"
		echo "$user:$user" > $UNION/tmp/chpasswd.tmp
		#chroot $UNION /usr/sbin/chpasswd < $UNION/tmp/chpasswd.tmp
		chroot $UNION chpasswd < $UNION/tmp/chpasswd.tmp

		rm -f $UNION/tmp/chpasswd.tmp
		# Configure suauth:
		echo "Configure suauth"
		echo "root:${user}:OWNPASS" > ${UNION}/etc/suauth
		echo "root:ALL EXCEPT GROUP wheel:DENY" >> ${UNION}/etc/suauth
		chmod 600 ${UNION}/etc/suauth

		# Configure sudoers:
		echo "Configure sudoers"
		chmod 640 ${UNION}/etc/sudoers
		sed -i ${UNION}/etc/sudoers -e 's/# *\(%wheel\sALL=(ALL)\sALL\)/\1/'
		chmod 440 ${UNION}/etc/sudoers
		
	else
		echo "/home/$user folder exists."
	fi
fi

#timezone
if [ ! -z "$timezone" ]; then
	if [ -f $UNION/usr/share/zoneinfo/$timezone ]; then
		echo "Timezone $timezone"
		ln -sf $UNION/usr/share/zoneinfo/$timezone $UNION/etc/localtime
	fi
fi

if [ ! -z "$runlevel" ]; then
	echo "init $runlevel"
	sed -i "s|^id:.*|id:${runlevel}:initdefault:|g" $UNION/etc/inittab
fi

if [ ! -z "$desktop" ]; then
	if [ -f $UNION/etc/X11/xinit/xinitrc.$desktop ]; then
		ln -sf xinitrc.$desktop  $UNION/etc/X11/xinit/xinitrc
	fi
fi

if [ ! -z "$fastboot" ]; then
	# needed so filesystem check will not happen on overlayfs
	echo "fastboot mode"
	touch $UNION/etc/fastboot
fi

if [ ! -z "$xconfig" ]; then
	echo "xorg configure"
	$UNION/usr/bin/Xorg -configure
	if [ -f /root/xorg.conf.new ]; then
		cp /root/xorg.conf.new $UNION/etc/X11/xorg.conf
	fi
	
	if [ -f $UNION/root/xorg.conf.new ]; then
		cp $UNION/root/xorg.conf.new $UNION/etc/X11/xorg.conf
	fi
	
fi

if [ ! -z "$nga" ]; then

	[ -d $UNION/etc/X11/xorg.conf.d ] || mkdir -p $UNION/etc/X11/xorg.conf.d
    cat <<EOT > $UNION/etc/X11/xorg.conf.d/20-noglamor.conf
Section "Device"
  Identifier "modesetting"
  Driver "modesetting"
  Option "AccelMethod" "none"
EndSection
EOT
fi

if [ ! -z "$lang" ]; then
	echo "export LANG=${lang}" > $UNION/etc/profile.d/lang.sh
	echo "export LC_COLLATE=${lang}" >> $UNION/etc/profile.d/lang.sh
fi

# rootcopy
copy_rootcopy_content "$DATA" "$UNION"

# create empty fstab
fstab_create "$UNION"
                                                                                                                                                      debug_shell
header "Live Kit done, starting $LIVEKITNAME"
change_root "$UNION"
																																					  debug_shell

header "!!ERROR occured, you shouldn't be here.!!"
/bin/sh
